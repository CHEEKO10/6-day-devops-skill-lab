Day 5: Kubernetes - Containers

Summary:

Today, we faced the limitations of managing raw Docker containers and discovered Kubernetes, the powerful tool that orchestrates and scales containerized applications. We explored how Kubernetes addresses the challenges of manual container management and enables robust, scalable deployments.

The Challenges of "Bare" Containers:

Scaling Issues:
Containers alone don't automatically adapt to changing traffic.
Scaling Up:
Vertical Scaling: Upgrading server hardware (CPU, RAM)—like giving a single runner more power.
Horizontal Scaling: Adding more servers—like adding more runners to a relay race.
Scaling Down: Reducing resources when traffic decreases, which requires manual intervention.
No Built-in Load Balancing:
Containers don't distribute traffic evenly, potentially overloading some while others sit idle.
Downtime and Lack of Self-Healing:
A failed container means a downed application, with no automatic recovery.
Enter Kubernetes (K8s): The Container Orchestra:

Kubernetes solves these problems by automating container management.
It handles deployment, scaling, and overall application management.
Key Kubernetes Strengths:
Orchestration: Centralized control of containers.
Auto-Scaling: Automatic resource adjustment.
Load Balancing: Even traffic distribution.
Self-Healing: Automatic restarts and recovery.
Kubernetes works anywhere: cloud or on-premises.
We use YAML files (manifests) to define Kubernetes automation.
Understanding Kubernetes Architecture:

Cluster: A group of nodes running applications.
Node: A server (instance).
Master Node: The "brain" of the cluster, managing everything.
Worker Node: The "workhorses," where applications run.
Every cluster needs at least one master and one worker node.
Cluster Types:
On-Premises: You manage everything.
Cloud-Managed (e.g., EKS on AWS): Cloud providers handle the infrastructure.
Master Node Components (The Brain):

API Server: The front door, handling all requests.
ETCD: The cluster's database, storing configuration.
Controllers: The monitors, ensuring the desired state is met.
Scheduler: The planner, assigning pods to nodes.
Worker Node Components (The Workhorses):

Kubelet: The node's agent, managing pods.
Container Runtime (e.g., Docker): Manages containers.
Kube-Proxy: The network manager.
Key Kubernetes Concepts:

Pod: The smallest unit, containing one or more containers.
YAML Manifests:

apiVersion: The Kubernetes API version.
kind: The object type (e.g., Pod).
metadata: Object details (name, labels).
spec: The desired object state.
Essential Kubernetes Commands (kubectl):

kubectl apply -f pod.yaml: Deploy a pod.
kubectl get pods: List pods.
kubectl get pods -o wide: List pods with details.
kubectl describe pod sample-pod: Get detailed pod information.
Resource Units:

1 CPU = 1000 millicores (mi).
1 GB = 1024 Megabytes (MB).
